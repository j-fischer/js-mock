{"version":3,"sources":["js-mock.js"],"names":["_logsEnabled","_idCounter","_shouldMonitorMocks","_monitor","mocks","globalMocks","__generateId","__format","result","arguments","i","len","length","replace","__log","console","log","apply","Array","prototype","slice","call","ExpectationError","message","name","stack","Error","Object","create","constructor","__GlobalMockFactory","args","_mock","mock","_context","context","_original","original","_propertyName","propertyName","_id","verifyActive","verifyMocks","verificationErrors","verify","ex","push","keys","forEach","property","join","restoreOriginal","expect","activate","restore","restoreWithoutVerifying","__toString","_STUB","_ALL_CALLS","__MockFactory","_name","_scope","_callCount","_expectTotalCalls","_expectations","reset","verifyScope","isMatcher","obj","matches","describeTo","doArgsMatch","expectedArgs","actualArgs","undefined","expectedArgument","actualArgument","findMatchingExpectation","actualArguments","stub","JSON","stringify","index","expectation","fulfilled","setProperty","value","atomicProperties","propNameFilter","val","filter","atomicPropName","setInScope","_thisMock","evalCall","msg","calls","callsAndThrows","exception","returnValue","allowing","exactly","count","onCall","withExactArgs","returns","callsAndReturns","func","TypeError","willThrow","error","unfulfilledExpectations","never","once","twice","thrice","onFirstCall","onSecondCall","onThirdCall","will","__resetMonitor","__createSimpleMock","newMock","__createObjectOrFunctionMock","objName","objType","errors","__mockGlobal","globalObjectName","objectSelectors","split","contextObject","window","global","orgType","globalMock","pop","__watch","factoryFunc","__assertWatched","API","mockName","objectToBeMocked","mockGlobal","watch","assertWatched","__enableLogs","__disableLogs"],"mappings":"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","sourcesContent":["/*!\r\n * JsMock - A simple Javascript mocking framework.\r\n * @version 2.0.0\r\n *\r\n * @author Johannes Fischer (johannes@jsmock.org)\r\n * @license BSD-3-Clause\r\n *\r\n * Copyright (c) 2020 Johannes Fischer\r\n */\r\nexport default (function () {\r\n\r\n  /* diagnostic variables */\r\n  var _logsEnabled = false;\r\n  var _idCounter = 0;\r\n\r\n  /* variables */\r\n  var _shouldMonitorMocks = false;\r\n  var _monitor = {\r\n    mocks: [],\r\n    globalMocks: []\r\n  };\r\n\r\n  /* global helper functions */\r\n  function __generateId() {\r\n    return _idCounter++;\r\n  }\r\n\r\n  function __format() {\r\n    var result = arguments[0];\r\n\r\n    var i, len = arguments.length;\r\n    for (i = 1; i < len; i++) {\r\n      result = result.replace(\"{\" + (i-1) + \"}\", arguments[i]);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function __log() {\r\n    if (_logsEnabled && console) {\r\n      console.log(__format.apply(null, Array.prototype.slice.call(arguments)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @class ExpectationError\r\n   * @classdesc An ExpectationError will be thrown in any situation where a mock\r\n   * expectation has not been met.\r\n   *\r\n   * @property {string} name The name of the error, will always return 'ExpectationError'.\r\n   * @property {string} message The error message for this error instance.\r\n   * @property {string} stack A string containing the stack trace for this error instance.\r\n   */\r\n  function ExpectationError(message) {\r\n    this.name = 'ExpectationError';\r\n    this.message = 'ExpectationError: ' + (message || 'Unknown expectation failed.');\r\n    this.stack = (new Error()).stack;\r\n  }\r\n  ExpectationError.prototype = Object.create(Error.prototype);\r\n  ExpectationError.prototype.constructor = ExpectationError;\r\n\r\n  /**\r\n   * Internal - Instantiated by JsMock.\r\n   *\r\n   * @name GlobalMock\r\n   * @private\r\n   * @class\r\n   *\r\n   * @classdesc The object returned by <code>JsMock.mockGlobal</code> representing the mock\r\n   * for a global function or function property. The object to verify the mock and restore\r\n   * the original object and allows the definition of expectations without having to use\r\n   * the original in a test case at all.\r\n   */\r\n  var __GlobalMockFactory = function (args) {\r\n    var _mock = args.mock;\r\n    var _context = args.context;\r\n    var _original = args.original;\r\n    var _propertyName = args.propertyName;\r\n\r\n    var _id = __generateId();\r\n    __log(\"Instantiating global mock '{0}:{1}'\", _propertyName, _id);\r\n\r\n    function verifyActive() {\r\n      if (_context[_propertyName] === _original)\r\n        throw new Error(\"Mock object has not been activated\");\r\n    }\r\n\r\n    function verifyMocks() {\r\n      var verificationErrors = [];\r\n      if (typeof(_mock) === \"function\") {\r\n        try {\r\n          _mock.verify();\r\n        } catch (ex) {\r\n          verificationErrors.push(ex.message);\r\n        }\r\n      }\r\n\r\n      Object.keys(_mock).forEach(function(propertyName) {\r\n        var property = _mock[propertyName];\r\n\r\n        if (typeof property !== \"function\") {\r\n          return;\r\n        }\r\n\r\n        try {\r\n          // If the main object is a function, it will contain mock's functions mixed with the original's function\r\n          if (property.verify) {\r\n            property.verify();\r\n          }\r\n        } catch (ex) {\r\n          verificationErrors.push(ex.message);\r\n        }\r\n      });\r\n\r\n      if (verificationErrors.length > 0) {\r\n        throw new ExpectationError(__format(\"Missing invocations detected for global mock {0}:\\n{1}\", _propertyName, verificationErrors.join(\"\\n\")));\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function restoreOriginal() {\r\n      __log(\"Restoring global mock '{0}:{1}'\", _propertyName, _id);\r\n      _context[_propertyName] = _original;\r\n    }\r\n\r\n    return {\r\n      /**\r\n       * Returns the mock object of this GlobalMock in order to set some expectations.\r\n       *\r\n       * @returns {Mock} The {@link Mock} instance representing this global mock object.\r\n       * @throws {Error} An error if this GlobalMock is not active.\r\n       *\r\n       * @see {@link Mock}\r\n       *\r\n       * @function GlobalMock#expect\r\n       */\r\n      expect: function () {\r\n        verifyActive();\r\n\r\n        return _mock;\r\n      },\r\n\r\n      /**\r\n       * Activates this <code>GlobalMock</code> by replacing the global, original object with the {@link Mock} instance.\r\n       *\r\n       * @function GlobalMock#activate\r\n       */\r\n      activate: function () {\r\n        __log(\"Activating global mock '{0}:{1}'\", _propertyName, _id);\r\n        _context[_propertyName] = _mock;\r\n      },\r\n\r\n      /**\r\n       * Verifies the entire mock object with all its properties and the main function, if available.\r\n       *\r\n       * @throws {ExpectationError} An expectation error if at least one expectation was not fulfilled.\r\n       *\r\n       * @function GlobalMock#verify\r\n       */\r\n      verify: verifyMocks,\r\n\r\n      /**\r\n       * First restores the original object and then verifies if all expectations have been fulfilled.\r\n       *\r\n       * @throws {ExpectationError} An expectation error if at least one expectation was not fulfilled.\r\n       *\r\n       * @see {@link GlobalMock#verify}\r\n       *\r\n       * @function GlobalMock#restore\r\n       */\r\n      restore: function () {\r\n        restoreOriginal();\r\n        return verifyMocks();\r\n      },\r\n\r\n      /**\r\n       * Restores the original object of this <code>GlobalMock</code> instance.\r\n       *\r\n       * @function GlobalMock#restoreWithoutVerifying\r\n       */\r\n      restoreWithoutVerifying: restoreOriginal,\r\n\r\n      /* For debugging purposes */\r\n      __toString: function () {\r\n        return __format(\"GlobalMock({0})\", _propertyName);\r\n      }\r\n    };\r\n  };\r\n\r\n  /* Mock constants */\r\n  var _STUB = \"STUB\"; // Makes a mock behave like a stub\r\n  var _ALL_CALLS = \"ALL_INVOCATIONS\"; // The scope of the invocations, i.e. exactly(3).returns('foo'); means return 'foo' for all invocations\r\n\r\n /**\r\n  * Internal - Instantiated by JsMock.\r\n  *\r\n  * @name Mock\r\n  * @private\r\n  * @class\r\n  *\r\n  * @classdesc The object returned by <code>JsMock.mock</code> representing the mock\r\n  * for a function. The object contains numerous methods to define expectations for the\r\n  * invocations of the mocked function and will match every call of this function\r\n  * against those expectations.\r\n  */\r\n  var __MockFactory = function (args) {\r\n\r\n    var _id = __generateId();\r\n    var _name = args.name;\r\n\r\n    __log(\"Instantiating mock '{0}:{1}'\", _name, _id);\r\n\r\n    var _scope, _callCount, _expectTotalCalls, _expectations;\r\n\r\n    function reset() {\r\n      __log(\"Resetting mock '{0}:{1}'\", _name, _id);\r\n      _scope = null;\r\n      _callCount = 0;\r\n      _expectTotalCalls = 0;\r\n      _expectations = {}; // {args, returnValue, calls, fulfilled}\r\n    }\r\n\r\n    function verifyScope() {\r\n      if (_scope === null) {\r\n        throw new Error(\"You must call allowing, exactly, never, once, twice or thrice before setting any other expectations for this mock.\");\r\n      }\r\n    }\r\n\r\n    function isMatcher(obj) {\r\n      return obj !== null &&\r\n        typeof obj === \"object\" &&\r\n        typeof obj.matches === \"function\" &&\r\n        typeof obj.describeTo === \"function\";\r\n    }\r\n\r\n    function doArgsMatch(expectedArgs, actualArgs) {\r\n\r\n      if (expectedArgs === undefined) {\r\n        // Wildcard - any args match\r\n        return true;\r\n      }\r\n\r\n      if (expectedArgs.length !== actualArgs.length) {\r\n        return false;\r\n      }\r\n\r\n      var i, len = expectedArgs.length;\r\n      for (i = 0; i < len; i++) {\r\n        var expectedArgument = expectedArgs[i];\r\n        var actualArgument = actualArgs[i];\r\n\r\n        if (isMatcher(expectedArgument)) {\r\n          if (expectedArgument.matches(actualArgument)) {\r\n            continue;\r\n          }\r\n          return false;\r\n        }\r\n\r\n        if (expectedArgument !== actualArgument) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function findMatchingExpectation(actualArguments) {\r\n      //find matching expectation, throw if no expectation is found\r\n      if (_scope === _STUB) {\r\n        var stub = _expectations[_STUB];\r\n        if (!doArgsMatch(stub.args, actualArguments)) {\r\n          throw new ExpectationError(__format(\"Unexpected invocation of '{0}'. Actual arguments: {1}.\", _name, JSON.stringify(actualArguments)));\r\n        }\r\n\r\n        return stub;\r\n      }\r\n\r\n      for (var index in _expectations) {\r\n        var expectation = _expectations[index];\r\n\r\n        if (expectation.fulfilled) {\r\n          continue;\r\n        }\r\n\r\n        if (!doArgsMatch(expectation.args, actualArguments)) {\r\n          break;\r\n        }\r\n\r\n        __log(\"Matched expectation '{0}' for mock '{1}:{2}'\", index, _name, _id);\r\n        return expectation;\r\n      }\r\n\r\n      throw new ExpectationError(__format(\"Unexpected invocation of '{0}' for call {1}: actual arguments: {2}.\", _name, index, JSON.stringify(actualArguments)));\r\n    }\r\n\r\n    function setProperty(obj, propertyName, value) {\r\n      var atomicProperties = {\r\n        \"returnValue\": \"returns\",\r\n        \"throws\": \"throws\",\r\n        \"calls\": \"callsAndReturns\",\r\n        \"callsAndThrows\": \"willThrow\"\r\n      };\r\n\r\n      if (atomicProperties[propertyName]) {\r\n        var propNameFilter = function (val) {\r\n          return val !== propertyName;\r\n        };\r\n\r\n        Object.keys(atomicProperties).filter(propNameFilter).forEach(function (atomicPropName) {\r\n          if (atomicPropName in obj) {\r\n            throw Error(atomicProperties[atomicPropName] + \"() is already set for this expectation. You can only define one of those two functions for you mock\");\r\n          }\r\n        });\r\n      }\r\n\r\n      obj[propertyName] = value;\r\n    }\r\n\r\n    function setInScope(propertyName, value) {\r\n      verifyScope();\r\n\r\n      __log(\"Setting '{0}' for mock '{1}:{2}'\", propertyName, _name, _id);\r\n      if (_scope !== _ALL_CALLS) {\r\n        setProperty(_expectations[_scope], propertyName, value);\r\n        return;\r\n      }\r\n\r\n      for (var index in _expectations) {\r\n        setProperty(_expectations[index], propertyName, value);\r\n      }\r\n    }\r\n\r\n    var _thisMock = function evalCall() {\r\n      var actualArguments = Array.prototype.slice.call(arguments);\r\n      \r\n      if (_callCount === _expectTotalCalls) {\r\n        var msg = _expectTotalCalls === 0 ?\r\n          \"'{0}' was not expected to be called. The invocation used the following arguments: {1}\" :\r\n          \"'{0}' was expected to be called {2} time(s). It was just invoked for the {3} time. The invocation used the following arguments: {1}\";\r\n\r\n        throw new ExpectationError(__format(msg, _name, JSON.stringify(actualArguments), _expectTotalCalls, (_expectTotalCalls + 1)));\r\n      }\r\n      \r\n      var expectation = findMatchingExpectation(actualArguments);\r\n\r\n      //set fulfilled\r\n      expectation.fulfilled = true;\r\n\r\n      _callCount++;\r\n\r\n      //execute function if applicable\r\n      if (expectation.calls) {\r\n        try {\r\n          return expectation.calls.apply(null, actualArguments);\r\n        } catch (ex) {\r\n          throw new ExpectationError(__format(\"Registered action for '{0}' threw an error: {1}.\", _name, JSON.stringify(ex)));\r\n        }\r\n      }\r\n\r\n      if (expectation.callsAndThrows) {\r\n        var exception = null;\r\n        try {\r\n          expectation.callsAndThrows.apply(null, actualArguments);\r\n        } catch (ex) {\r\n          exception = ex;\r\n        }\r\n\r\n        throw exception ?\r\n          exception :\r\n          new ExpectationError(__format(\"Registered action for '{0}' was expected to throw an exception.\", _name));\r\n      }\r\n\r\n      if (expectation.throws !== undefined) {\r\n        throw expectation.throws;\r\n      }\r\n\r\n      //return value\r\n      return expectation.returnValue;\r\n    };\r\n\r\n    /**\r\n     * Simply returns this {@link Mock} instance. The function was added to match the API for {@link GlobalMock} so that\r\n     * the expectations can be defined with the same syntax, which makes switching between those types easy.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#expect\r\n     */\r\n    _thisMock.expect = function() {\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Allows the mock to be called any number if times, assuming that the invocation still fulfills\r\n     * the expectations defined with the {@link Mock#with} function.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#allowing\r\n     */\r\n    _thisMock.allowing = function() {\r\n      reset();\r\n\r\n      _expectTotalCalls = -1;\r\n      _expectations[_STUB] = {};\r\n      _scope = _STUB;\r\n\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Set the expectation for the mock to be called 'x' number of times.\r\n     *\r\n     * @param {number} count The number of times how often this mock is expected to be called.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#exactly\r\n     */\r\n    _thisMock.exactly = function(count) {\r\n      if (count < 0) {\r\n        throw new Error(\"'count' must be 0 or higher\");\r\n      }\r\n\r\n      reset();\r\n\r\n      _scope = _ALL_CALLS;\r\n      _expectTotalCalls = count;\r\n\r\n      for (var i = 1; i <= count; i++) {\r\n        _expectations[i] = {};\r\n      }\r\n\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Will set all following expectations for the given call.\r\n     *\r\n     * @param {number} number The index of the call (starting with 1) where the expectations should be set.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#onCall\r\n     */\r\n    _thisMock.onCall = function (index) {\r\n      if (index < 1) {\r\n        throw new Error(\"Call index must be larger than 0\");\r\n      }\r\n\r\n      if (_expectTotalCalls < 0) {\r\n          throw new Error(\"Mock is set up as a stub. Cannot set expectations for a specific call.\");\r\n      }\r\n\r\n      if (index > _expectTotalCalls) {\r\n        throw new Error(\"Attempting to set the behaviour for a call that is not expected. Calls expected: \" + _expectTotalCalls + \", call attempted to change: \" + index);\r\n      }\r\n\r\n      _scope = index;\r\n\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Expects the function to be called with the given arguments. Any of the given arguments can be\r\n     * a HamJest style matcher. If a matcher is provided as an argument, the actual argument will\r\n     * be passed on to the `matches()` function of the matcher object.\r\n     *\r\n     * @param {...?(number|boolean|string|array|object|function)} arguments The arguments to be expected when the function is invoked.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#withExactArgs\r\n     */\r\n    _thisMock.withExactArgs = function () {\r\n      setInScope(\"args\", Array.prototype.slice.call(arguments));\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Expects the function to be called to return the given value.\r\n     *\r\n     * @param {?(number|boolean|string|array|object|function)} returnValue The value to be returned when the function is invoked.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @throws {Error} An error if {@link Mock#returns} has already been defined for this expectation.\r\n     *\r\n     * @function Mock#returns\r\n     */\r\n    _thisMock.returns = function (returnValue) {\r\n      setInScope(\"returnValue\", returnValue);\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Executes a function if the mock was successfully matched. All arguments passed in to the mock function\r\n     * will be passed on to the function defined in here. The function will be executed immediately and the\r\n     * value returned by the function will also be the return value of the mock.\r\n     *\r\n     * @param {!function} func The function to be executed when the expectation is fulfilled.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @throws {TypeError} An error if the given argument is not a function.\r\n     * @throws {Error} An error if another outcome has already been defined for this expectation.\r\n     *\r\n     * @function Mock#callsAndReturns\r\n     */\r\n    _thisMock.callsAndReturns = function (func) {\r\n      if (typeof (func) !== \"function\") {\r\n        throw new TypeError(\"Argument must be a function\");\r\n      }\r\n\r\n      setInScope(\"calls\", func);\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Executes a function if the mock was successfully matched. All arguments passed in to the mock function\r\n     * will be passed on to the function defined in here. The function will be executed immediately and is\r\n     * expected to throw an exception. If it does not throw and expection, an {ExpectationError} will be thrown.\r\n     *\r\n     * @param {!function} func The function to be executed when the expectation is fulfilled.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @throws {TypeError} An error if the given argument is not a function.\r\n     * @throws {Error} An error if another outcome has already been defined for this expectation.\r\n     *\r\n     * @function Mock#willThrow\r\n     */\r\n    _thisMock.willThrow = function (func) {\r\n      if (typeof (func) !== \"function\") {\r\n        throw new TypeError(\"Argument must be a function\");\r\n      }\r\n\r\n      setInScope(\"callsAndThrows\", func);\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Expects the function to be called to throw the given error.\r\n     *\r\n     * @param {(string|object)} error The error to be thrown.\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @throws {TypeError} An error if the given argument is null or undefined.\r\n     * @throws {Error} An error if another outcome has already been defined for this expectation.\r\n     *\r\n     * @function Mock#throws\r\n     */\r\n    _thisMock.throws = function (error) {\r\n      if (typeof (error) !== 'string' && typeof (error) !== 'object') {\r\n        throw new TypeError(\"Argument must either be a string or an object\");\r\n      }\r\n\r\n      if (error === null) {\r\n        throw new TypeError(\"Argument cannot be null\");\r\n      }\r\n\r\n      setInScope(\"throws\", error);\r\n      return _thisMock;\r\n    };\r\n\r\n    /**\r\n     * Verifies of all set expectations of this mock are fulfilled. If not, an ExpectationError will be thrown.\r\n     * If the verification passes, the mock will be reset to its original state.\r\n     *\r\n     * @returns {boolean} Returns <code>true</code> if all expectations for this mock were satisfied.\r\n     *                    This is useful for simple assertions in case a test framework requires one.\r\n     *\r\n     * @throws {ExpectationError} An ExpectationError if any expectation was not fulfilled.\r\n     *\r\n     * @function Mock#verify\r\n     */\r\n    _thisMock.verify = function () {\r\n      __log(\"Verifying mock '{0}:{1}'\", _name, _id);\r\n      if (_scope === _STUB) {\r\n        reset();\r\n        return true;\r\n      }\r\n\r\n      var unfulfilledExpectations = [];\r\n      Object.keys(_expectations).forEach(function(index) {\r\n        var expectation = _expectations[index];\r\n\r\n        if (!expectation.fulfilled) {\r\n          unfulfilledExpectations.push(__format(\"Expectation for call {0} with args {1}, will return {2}\", index, (JSON.stringify(expectation.args) || \"undefined\").replace('\\\\\"', '\"'), JSON.stringify(expectation.returnValue)));\r\n        }\r\n      });\r\n\r\n      if (unfulfilledExpectations.length > 0) {\r\n        throw new ExpectationError(__format(\"Missing invocations for {0}():\\n>>> {1}\", _name, unfulfilledExpectations.join(\"\\n>>> \")));\r\n      }\r\n\r\n      reset();\r\n      return true;\r\n    };\r\n\r\n   /* helpers, i.e. once, twice, onFirstCall, etc */\r\n   /**\r\n    * Alias for exactly(0).\r\n    *\r\n    * @see {@link Mock#exactly}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#never\r\n    */\r\n   _thisMock.never = function () {\r\n     return _thisMock.exactly(0);\r\n   };\r\n\r\n    /* helpers, i.e. once, twice, onFirstCall, etc */\r\n    /**\r\n     * Alias for exactly(1).\r\n     *\r\n     * @see {@link Mock#exactly}\r\n     *\r\n     * @returns {Mock} This {@link Mock} instance.\r\n     *\r\n     * @function Mock#once\r\n     */\r\n    _thisMock.once = function () {\r\n      return _thisMock.exactly(1);\r\n    };\r\n\r\n   /**\r\n    * Alias for exactly(2).\r\n    *\r\n    * @see {@link Mock#exactly}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#twice\r\n    */\r\n    _thisMock.twice = function () {\r\n      return _thisMock.exactly(2);\r\n    };\r\n\r\n   /**\r\n    * Alias for exactly(3).\r\n    *\r\n    * @see {@link Mock#exactly}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#thrice\r\n    */\r\n    _thisMock.thrice = function () {\r\n      return _thisMock.exactly(3);\r\n    };\r\n\r\n   /**\r\n    * Alias for onCall(1).\r\n    *\r\n    * @see {@link Mock#onCall}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#onFirstCall\r\n    */\r\n    _thisMock.onFirstCall = function () {\r\n      return _thisMock.onCall(1);\r\n    };\r\n\r\n   /**\r\n    * Alias for onCall(2).\r\n    *\r\n    * @see {@link Mock#onCall}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#onSecondCall\r\n    */\r\n    _thisMock.onSecondCall = function () {\r\n      return _thisMock.onCall(2);\r\n    };\r\n\r\n   /**\r\n    * Alias for onCall(3).\r\n    *\r\n    * @see {@link Mock#onCall}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#onThirdCall\r\n    */\r\n    _thisMock.onThirdCall = function () {\r\n      return _thisMock.onCall(3);\r\n    };\r\n\r\n   /**\r\n    * Alias for callsAndReturns.\r\n    *\r\n    * @see {@link Mock#callsAndReturns}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#will\r\n    */\r\n    _thisMock.will = function (func) {\r\n      return _thisMock.callsAndReturns(func);\r\n    };\r\n\r\n   /**\r\n    * Alias for withExactArgs.\r\n    *\r\n    * @see {@link Mock#withExactArgs}\r\n    *\r\n    * @returns {Mock} This {@link Mock} instance.\r\n    *\r\n    * @function Mock#with\r\n    */\r\n    _thisMock.with = _thisMock.withExactArgs;\r\n\r\n    /* For debugging purposes */\r\n    _thisMock.__toString = function () {\r\n      return _name + \":\" + _id;\r\n    };\r\n\r\n    reset();\r\n\r\n    return _thisMock;\r\n  };\r\n\r\n  /* internal functions */\r\n  function __resetMonitor() {\r\n    __log(\"Resetting monitor\");\r\n    _monitor = {\r\n      mocks: [],\r\n      globalMocks: []\r\n    };\r\n  }\r\n\r\n  function __createSimpleMock(name) {\r\n    var newMock = __MockFactory({\r\n      name: name\r\n    });\r\n\r\n    if (_shouldMonitorMocks) {\r\n      __log(\"Adding '{0}' to monitor\", newMock.__toString());\r\n      _monitor.mocks.push(newMock);\r\n    }\r\n\r\n    return newMock;\r\n  }\r\n\r\n  function __createObjectOrFunctionMock(objName, obj, objType) {\r\n    if (obj.constructor === Array) {\r\n      throw new TypeError(\"Mocking of arrays is not supported\");\r\n    }\r\n\r\n    var result =\r\n      objType === \"function\" ?\r\n        __createSimpleMock(objName) :\r\n        {};\r\n\r\n    var errors = [];\r\n    Object.keys(obj).forEach(function(propertyName) {\r\n      if (result[propertyName] !== undefined) {\r\n        errors.push(__format(\"'{0}' has already been assigned to the mock object.\", propertyName));\r\n      }\r\n\r\n      if (typeof obj[propertyName] === \"function\") {\r\n        result[propertyName] = __createSimpleMock(objName + \".\" + propertyName);\r\n      } else {\r\n        result[propertyName] = obj[propertyName];\r\n      }\r\n    });\r\n\r\n    if (errors.length > 0) {\r\n      throw new Error(\"Failed to create mock object for the following reasons: \" + JSON.stringify(errors));\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function __mockGlobal(globalObjectName) {\r\n    var objectSelectors = globalObjectName.split(\".\");\r\n    var contextObject = typeof window === 'undefined' ?\r\n      global : //Node\r\n      window; //Browser\r\n\r\n    var original = contextObject[objectSelectors[0]];\r\n\r\n    var i, len = objectSelectors.length;\r\n    for (i = 1; i < len; i++) {\r\n      contextObject = original;\r\n      original = contextObject[objectSelectors[i]];\r\n    }\r\n\r\n    var orgType = typeof original;\r\n    if (orgType !== \"function\" && orgType !== \"object\") {\r\n      throw new TypeError(__format(\"Global variable '{0}' must be an object or a function, but was '{1}'\", globalObjectName, orgType));\r\n    }\r\n\r\n    if (original === null) {\r\n      throw new TypeError(__format(\"Global variable '{0}' cannot be null\", globalObjectName));\r\n    }\r\n\r\n    var mock = __createObjectOrFunctionMock(globalObjectName, original, orgType);\r\n\r\n    var globalMock = __GlobalMockFactory({\r\n      propertyName: objectSelectors.pop(),\r\n      context: contextObject,\r\n      original: original,\r\n      mock: mock\r\n    });\r\n\r\n    if (_shouldMonitorMocks) {\r\n      __log(\"Adding '{0}' to monitor\", globalMock.__toString());\r\n      _monitor.globalMocks.push(globalMock);\r\n    }\r\n\r\n    globalMock.activate();\r\n\r\n    return globalMock;\r\n  }\r\n\r\n  function __watch(factoryFunc) {\r\n    if (typeof factoryFunc !== \"function\") {\r\n      throw new TypeError(\"The first argument must be a function\");\r\n    }\r\n\r\n    // Clean up monitored mocks so that the same JsMock context can be used between test files\r\n    __resetMonitor();\r\n\r\n    try {\r\n      _shouldMonitorMocks = true;\r\n      factoryFunc();\r\n    } finally {\r\n      _shouldMonitorMocks = false;\r\n    }\r\n  }\r\n\r\n  function __assertWatched() {\r\n    var i, len = _monitor.globalMocks.length;\r\n\r\n    // First restore to ensure the proper state for the next test\r\n    for (i = 0; i < len; i++) {\r\n      var globalMock = _monitor.globalMocks[i];\r\n      __log(\"Restoring global mock '{0}'\", globalMock.__toString());\r\n      globalMock.restoreWithoutVerifying();\r\n    }\r\n\r\n    len = _monitor.mocks.length;\r\n    for (i = 0; i < len; i++) {\r\n      var mock = _monitor.mocks[i];\r\n      __log(\"Asserting mock '{0}'\", mock.__toString());\r\n      mock.verify();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n /**\r\n  * JavaScript mocking framework, which can be used with any test framework. JsMock is inspired by jMock and Sinon.js\r\n  * with its interface being very similar to Sinon in order to make it easy to switch between those two frameworks.<br>\r\n  * <br>\r\n  * JsMock does only support mocks where all expectations have to be set prior to making the call to the function under test.<br>\r\n  *\r\n  * @exports js-mock\r\n  */\r\n  var API = {\r\n    /**\r\n     * Creates a mock object for a function.<br>\r\n     * <br>\r\n     * If the <code>objectToBeMocked</code> property is provided, the <code>mockName</code> will be used as a prefix for each mock of the object, while the function name will be the suffix.<br>\r\n     * Only functions of the object will be mocked. Any other types will simply be copied over. If the object is a function itself (like jQuery, for example), the main function will also be mocked.\r\n     *\r\n     * @param {string} mockName A named to be used to idenfify this mock object. The name will be include in any thrown {@link ExpectationError}.\r\n     * @param {object|function} objectToBeMocked The object to be cloned with mock functions. Only functions will be mocked, any other property values will simply be copied over.\r\n     *\r\n     * @returns {Mock} a mock object\r\n     */\r\n    mock: function (mockName, objectToBeMocked) {\r\n      if (typeof mockName !== \"string\" || !mockName) {\r\n        throw new TypeError(\"The first argument must be a string\");\r\n      }\r\n\r\n      var objType = typeof objectToBeMocked;\r\n      if (objType === \"function\" || (objType === \"object\" && objectToBeMocked !== null)) {\r\n        return __createObjectOrFunctionMock(mockName, objectToBeMocked, objType);\r\n      }\r\n\r\n      return __createSimpleMock(mockName);\r\n    },\r\n\r\n\r\n    /**\r\n     * Creates a mock object for a global variable or a child property of it. For the replacement of a child property, the path to the property must be provided, separated by a '.'.<br>\r\n     * For example, <code>JsMock.mockGlobal(\"$\")</code> will mock the entire jQuery library, while <code>JsMock.mockGlobal(\"$.ajax\")</code> will only mock the ajax() function, but leave\r\n     * the remaining jQuery API intact.\r\n     * <br>\r\n     * The global variable must be of a type 'object' or 'function' and cannot be <code>null</code>.\r\n     *\r\n     * @param {string} globalObjectName The name of the global variable as it is registered with either the <code>window</code> or <code>global</code> object.\r\n     *\r\n     * @throws {TypeError} A type error if the argument is not a {string} or empty.\r\n     * @throws {TypeError} A type error if the global object cannot be mocked.\r\n     * @throws {TypeError} A type error if the global object is a function and contains properties conflicting with the {@link Mock} API.\r\n     *\r\n     * @returns {GlobalMock} mock object for the global variable\r\n     */\r\n    mockGlobal: function (globalObjectName) {\r\n      if (typeof globalObjectName !== \"string\" || !globalObjectName) {\r\n        throw new TypeError(\"The first argument must be a string\");\r\n      }\r\n\r\n      return __mockGlobal(globalObjectName);\r\n    },\r\n\r\n    /**\r\n     * When testing a module or file, the best way is to define a set of global mocks,\r\n     * which can be shared between the test cases using the <code>JsMock.watch()</code> function.\r\n     * All mocks created inside the factory function will be added to the current test\r\n     * context and can be verified with a single call to <code>JsMock.assertWatched()</code>.<br>\r\n     * <br>\r\n     * For example:\r\n     * <pre>\r\n     *    var mockFunction1, mockFunction2;\r\n     *    JsMock.watch(function () {\r\n     *      mockFunction1 = JsMock.mock(\"name1\");\r\n     *      mockFunction2 = JsMock.mock(\"name2\");\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {function} factoryFunc A function that will create mock objects for the current test context.\r\n     *\r\n     * @throws {TypeError} A type error if the argument is not a {function}.\r\n     *\r\n     * @function module:js-mock.watch\r\n     */\r\n    watch: __watch,\r\n\r\n    /**\r\n     * Verify all mocks registered in the current test context.<br>\r\n     * <br>\r\n     * All mock objects that where created in the factory function of <code>watch()</code>\r\n     * will be verified and an {@link ExpectationError} will be thrown if any of those\r\n     * mocks fails the verification.\r\n     * <br>\r\n     * Any global mocks that were created using <code>mockGlobal()</code> will also be restored.\r\n     *\r\n     * @throws {ExpectationError} An error if a mock object in the current test context failed the verification.\r\n     * @returns {boolean} Returns <code>true</code> if all mocks were satisfied. This is useful for simple assertions\r\n     *                    in case a test framework requires one.\r\n     *\r\n     * @function module:js-mock.assertWatched\r\n     */\r\n    assertWatched: __assertWatched,\r\n\r\n    /* For internal debugging purposes */\r\n    __enableLogs: function() {\r\n      _logsEnabled = true;\r\n    },\r\n\r\n    __disableLogs: function() {\r\n      _logsEnabled = false;\r\n    }\r\n  };\r\n\r\n  API.ExpectationError = ExpectationError;\r\n\r\n  return API;\r\n})();"],"file":"js-mock.js"}